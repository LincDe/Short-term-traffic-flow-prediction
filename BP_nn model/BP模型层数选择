import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from keras.optimizers import Adam
from keras.layers import LSTM
import datetime as dt

scaler = MinMaxScaler(feature_range=(-1, 1))


def get_data(scaler):
    df = pd.read_csv('46607520312.csv',engine='python')
    df.drop(['46607520312'],axis=1,inplace=True)
    df.drop(['0000'],axis=1,inplace=True)
    df.replace(to_replace=r"\n", value='', inplace=True, regex=True)
    df.replace(to_replace=r"null", value=np.nan, inplace=True, regex=True)
    df.fillna(method='pad',inplace=True)
    df = df.astype(float)
    # split training data and test data
    train = df.loc[:110000]
    test = df.loc[110000:]

    train_sc = scaler.fit_transform(train)
    test_sc = scaler.transform(test)
    X_train = train_sc[:-1]
    y_train = train_sc[1:]
    X_test = test_sc[:-1]
    y_test = test_sc[1:]
    return X_train,y_train,X_test,y_test


def BP_model(layer,X_train,y_train,X_test,y_test):
    np.random.seed(20)
    nn_model = Sequential()
    nn_model.add(Dense(layer, input_dim=1, activation='relu'))
    nn_model.add(Dense(1))
    nn_model.compile(loss='mean_squared_error', optimizer='adam')
    early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
    history = nn_model.fit(X_train, y_train, epochs=1, batch_size=64, verbose=1, callbacks=[early_stop], shuffle=False)
    y_test_nn = nn_model.predict(X_test)
    y_train_nn = nn_model.predict(X_train)

    inv_y_test = scaler.inverse_transform(y_test_nn)
    inv_y_train = scaler.inverse_transform(y_train_nn)

    inv_y_test_ac=scaler.inverse_transform(y_test)
    inv_y_train_ac=scaler.inverse_transform(y_train)
    print("The MSE score on the Train set is:\t{:0.3f}".format(mean_squared_error(inv_y_train_ac, inv_y_train)))
    print("The MSE score on the Test set is:\t{:0.3f}".format(mean_squared_error(inv_y_test_ac, inv_y_test)))
    
    return mean_squared_error(inv_y_train_ac, inv_y_train),mean_squared_error(inv_y_test_ac, inv_y_test)


if __name__=='__main__':
    loss_test = []
    loss_train = []
    X_train,y_train,X_test,y_test=get_data(scaler)
    for i in range(1,11):
        print('this is round %d now'%i)
        mse_train,mse_test=BP_model(i,X_train,y_train,X_test,y_test)
        loss_train.append(mse_train)
        loss_test.append(mse_test)

    print('mse of train data:' + str(loss_train))
    print('mse of test data:' + str(loss_test))
    tick = np.linspace(1,10,10)
    plt.plot(tick,loss_test,label='Test Data')
    plt.plot(tick,loss_train,label='Train Data')
    plt.xlabel('Layer of BP Neural Network')
    plt.ylabel('MSE')
    plt.xticks(np.linspace(1,10,10))
    plt.legend()
    plt.savefig('BP神经网络层数比较.png')
    plt.show()
