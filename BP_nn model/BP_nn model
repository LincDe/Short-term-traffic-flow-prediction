import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from keras.optimizers import Adam
from keras.layers import LSTM
import datetime as dt

# get data
df = pd.read_csv('46607520312.csv',engine='python')
df.drop(['46607520312'],axis=1,inplace=True)
df.drop(['0000'],axis=1,inplace=True)
df.replace(to_replace=r"\n", value='', inplace=True, regex=True)
df.replace(to_replace=r"null", value=np.nan, inplace=True, regex=True)
df.fillna(method='pad',inplace=True)
df = df.astype(float)
train = df.loc[:len(df)-2880]
test = df.loc[len(df)-1440:]

scaler = MinMaxScaler(feature_range=(-1, 1))
train_sc = scaler.fit_transform(train)
test_sc = scaler.transform(test)

X_train = train_sc[:-1]
y_train = train_sc[1:]
X_test = test_sc[:-1]
y_test = test_sc[1:]

time2=dt.datetime.now()
nn_model = Sequential()
nn_model.add(Dense(6, input_dim=1, activation='relu'))
nn_model.add(Dense(1))
nn_model.compile(loss='mean_squared_error', optimizer='adam')
early_stop = EarlyStopping(monitor='loss', patience=2, verbose=1)
history = nn_model.fit(X_train, y_train, epochs=10, batch_size=64, verbose=1, callbacks=[early_stop], shuffle=False)

y_test_nn = nn_model.predict(X_test)
y_train_nn = nn_model.predict(X_train)
inv_y_test = scaler.inverse_transform(y_test_nn)
inv_y_train = scaler.inverse_transform(y_train_nn)

inv_y_test_ac=scaler.inverse_transform(y_test)
inv_y_train_ac=scaler.inverse_transform(y_train)
print("The MSE score on the Train set is:\t{:0.3f}".format(mean_squared_error(inv_y_train_ac, inv_y_train)))
print("The MSE score on the Test set is:\t{:0.3f}".format(mean_squared_error(inv_y_test_ac, inv_y_test)))
time3=dt.datetime.now()
print('Time use:'+str(time3-time2))

#save the model
mp = "BP46607520312.h5"
nn_model.save(mp)

plt.plot(inv_y_test,label='Predict')
plt.plot(inv_y_test_ac,label='Test data')
plt.legend()
plt.ylabel('Speed')
plt.xlabel('Data Number')
plt.title('BP model')
plt.savefig('46607520312BP.png')
plt.show()
